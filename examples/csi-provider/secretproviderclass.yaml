apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: webapp-secrets
  namespace: default
spec:
  provider: vault
  parameters:
    # OpenBao address
    vaultAddress: "http://openbao:8200"
    
    # Role name configured in OpenBao
    roleName: "webapp"
    
    # Skip TLS verification (only for development)
    vaultSkipTLSVerify: "true"
    
    # Authentication mount path
    vaultKubernetesMountPath: "kubernetes"
    
    # Secrets to fetch from OpenBao
    objects: |
      # Database credentials from KV v2
      - objectName: "database-username"
        objectType: "kv"
        objectPath: "secret/data/webapp/database"
        objectKey: "username"
        objectVersion: ""
      
      - objectName: "database-password"
        objectType: "kv"
        objectPath: "secret/data/webapp/database"
        objectKey: "password"
        objectVersion: ""
      
      - objectName: "database-host"
        objectType: "kv"
        objectPath: "secret/data/webapp/database"
        objectKey: "host"
        objectVersion: ""
      
      # API credentials
      - objectName: "api-key"
        objectType: "kv"
        objectPath: "secret/data/webapp/api"
        objectKey: "key"
        objectVersion: ""
      
      - objectName: "api-secret"
        objectType: "kv"
        objectPath: "secret/data/webapp/api"
        objectKey: "secret"
        objectVersion: ""
      
      # Example: PKI certificate generation
      # - objectName: "webapp-tls"
      #   objectType: "pki"
      #   objectPath: "pki/issue/webapp"
      #   objectVersion: ""
      #   objectData:
      #     common_name: "webapp.example.com"
      #     ttl: "720h"
      #     alt_names: "webapp.local,webapp.default.svc.cluster.local"
      
      # Example: Dynamic database credentials
      # - objectName: "postgres-creds"
      #   objectType: "database"
      #   objectPath: "database/creds/readonly"
      #   objectVersion: ""
  
  # Optional: Sync to Kubernetes secrets
  secretObjects:
    # Create a Kubernetes secret with database credentials
    - secretName: webapp-db-secret
      type: Opaque
      labels:
        app: webapp
        source: openbao
      data:
        - objectName: database-username
          key: username
        - objectName: database-password
          key: password
        - objectName: database-host
          key: host
    
    # Create a separate secret for API credentials
    - secretName: webapp-api-secret
      type: Opaque
      labels:
        app: webapp
        source: openbao
      data:
        - objectName: api-key
          key: api-key
        - objectName: api-secret
          key: api-secret

---
# Example SecretProviderClass for TLS certificates
apiVersion: secrets-store.csi.x-k8s.io/v1
kind: SecretProviderClass
metadata:
  name: webapp-tls-secrets
  namespace: default
spec:
  provider: vault
  parameters:
    vaultAddress: "http://openbao:8200"
    roleName: "webapp"
    vaultSkipTLSVerify: "true"
    vaultKubernetesMountPath: "kubernetes"
    
    objects: |
      # Generate TLS certificate from PKI
      - objectName: "tls.crt"
        objectType: "pki"
        objectPath: "pki/issue/webapp"
        objectVersion: ""
        objectFormat: "pem"
        objectEncoding: "utf-8"
        objectData:
          common_name: "webapp.example.com"
          ttl: "720h"
          format: "pem"
      
      # The private key will be in the same response
      - objectName: "tls.key"
        objectType: "pki"
        objectPath: "pki/issue/webapp"
        objectVersion: ""
        objectFormat: "pem"
        objectEncoding: "utf-8"
        objectKey: "private_key"
        objectData:
          common_name: "webapp.example.com"
          ttl: "720h"
          format: "pem"
      
      # CA certificate
      - objectName: "ca.crt"
        objectType: "pki"
        objectPath: "pki/issue/webapp"
        objectVersion: ""
        objectFormat: "pem"
        objectEncoding: "utf-8"
        objectKey: "issuing_ca"
        objectData:
          common_name: "webapp.example.com"
          ttl: "720h"
          format: "pem"
  
  # Create Kubernetes TLS secret
  secretObjects:
    - secretName: webapp-tls
      type: kubernetes.io/tls
      data:
        - objectName: tls.crt
          key: tls.crt
        - objectName: tls.key
          key: tls.key
        - objectName: ca.crt
          key: ca.crt